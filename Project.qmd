---
title: "Data Science for Public Policy"
subtitle: "Final Project"
author: "J Lei, Kieran Connolly, Parker Lazear"
execute:
  warning: false
format:
  html:
    embed-resources: true
---
```{r}
library(tidyverse)
library(dplyr)
library(readr)
library(sf)
library(recipes)
library(tidymodels)
library(broom)
library(patchwork)
library(ggplot2)
library(tidyclust)
library(Rfast)
library(workflows)
library(sf)
library(gganimate)
library(patchwork)
library(yardstick)
```


```{r}

income_data<- read_csv("income.csv")

census_data <- read.csv("census_data.csv")

ed_data <- read.csv("ed_data.csv")

urban_institute_data <- read.csv("urban_institute_data.csv")


ed_census_inc <- left_join(income_data, census_data, by = "GEO_ID")
ed_census_inc <- left_join(ed_census_inc, ed_data, by = "GEO_ID")


ed_census_inc <- ed_census_inc %>%
  select(-Area_Name.x)%>%
  select(-Area_Name.y)

ed_census_inc_percent_tract <- ed_census_inc %>%
  mutate(percent_broadband = (100*(1-(Broadband.of.any.type..estimate / Total.Housholds.Estimate))))

ed_census_inc_percent_tract <- ed_census_inc_percent_tract %>%
  filter(startsWith(Geographic.Area.Name, "Census Tract"))

ed_census_inc_percent_tract <- ed_census_inc_percent_tract %>%
  mutate(GEOID = GEO_ID)%>%
  select(-GEO_ID)

ed_census_inc_percent_tract <- ed_census_inc_percent_tract %>%
  mutate(less_than_hs_percent = 100*less_than_hs / Pop_18.24) %>%
  mutate(some_college_percent = 100* some_college / Pop_18.24) %>%
  mutate(hs_percent = 100* hs / Pop_18.24) %>%
  mutate(bachelors_percent = 100 * bachelors/ Pop_18.24) %>%
  select(-less_than_hs_moe, -hs_moe, -some_college_moe, -bachelors_moe)


```


```{r}


geospatial_data <- st_read("cb_2022_54_tract_500k", quiet = TRUE)

geospatial_data<- geospatial_data %>%
  select(GEOID, geometry)

broadband_tract <- ed_census_inc_percent_tract %>%
  select(percent_broadband, GEOID)%>%
  mutate(GEOID = sub("1400000US","",GEOID))

join_data <- left_join(x= geospatial_data, broadband_tract, by = "GEOID")


hs_tract <- ed_census_inc_percent_tract %>%
  select(less_than_hs_percent, GEOID, hs_percent, some_college_percent, bachelors_percent)%>%
  mutate(GEOID = sub("1400000US","",GEOID))

join_data2 <- left_join(x= geospatial_data, hs_tract, by = "GEOID")

ed_census_inc_percent_tract$income <- as.numeric(ed_census_inc_percent_tract$income)
ed_census_inc_percent_tract$percent_broadband <- as.numeric(ed_census_inc_percent_tract$percent_broadband)
plot1 <- ggplot(data = ed_census_inc_percent_tract,
  aes(x =  income, y= percent_broadband))+
  geom_point()+
  labs(title = "Lacking Broadband", x ="income", y = "lack broadband")+
  geom_smooth(aes(color = "red"), method = "lm",se = FALSE)+
  theme_minimal()+
  theme(legend.position = "none")

plot1

ed_with_income_lvl <- ed_census_inc_percent_tract %>%
  mutate(income_level = ifelse(income<=33000, "low", ifelse(income > 33000 & income<= 60000,"medium","high") )) %>%
  filter(!is.na(income_level))
# assign each census tract an income level based on the definition taht income lower than 33000 is low-income, between 33000 and 60000 is medium-income and higher than 60000 is high-income
plot2 <- ggplot(data = ed_with_income_lvl,
  aes(x =  less_than_hs_percent, y= percent_broadband, color  = income_level))+
  geom_point()+
  labs(title = "percentage with broadband by education", x ="population with less than high school degree", y = "lack broadband")+
  theme_minimal()

plot2 

hist(ed_census_inc_percent_tract$less_than_hs_percent, xlab = "Percentage of population less high school", ylab = "Number of census tracts", main = "Histogram of percentage of population with less than high school degree,\n by census tract")


#abline(lm(percent_broadband ~ income,data=ed_census_inc_percent_tract),col='red')
broadband_plot <- ggplot(st_as_sf(join_data)) + 
  geom_sf(aes(fill = percent_broadband)) +
  scale_fill_gradient(high = "red", low = "green") +
  coord_sf()+
  labs(title = "Lacking Broadband")+
  labs(fill = "% of Population")+
  theme_void()


ed_plot <- ggplot(st_as_sf(join_data2)) + 
  geom_sf(aes(fill = hs_percent)) +
  scale_fill_gradient(high = "red", low = "green") +
  coord_sf()+
  labs(title = "High School Diploma")+
  labs(fill = "% of Population")+
  theme_void()


plot_together = broadband_plot + ed_plot

plot_together


```

```{r}


hs_tract_long <- tidyr::pivot_longer(
  hs_tract,
  cols = c("less_than_hs_percent", "hs_percent", "some_college_percent", "bachelors_percent"),
  names_to = "education_level",
  values_to = "percentage"
)

hs_tract_long <- hs_tract_long %>%
    mutate(percentage = as.numeric(percentage))

join_data3 <- left_join(x= hs_tract_long, geospatial_data, by = "GEOID")

dropped_data <- anti_join(geospatial_data, join_data3, by = "GEOID")

join_data3$education_level <- as.factor(join_data3$education_level)

base_plot <- ggplot(st_as_sf(join_data3)) + 
  geom_sf(data = st_as_sf(dropped_data), fill = "darkgrey")+
  geom_sf(aes(fill = percentage)) + 
  scale_fill_gradient(high = "red", low = "green") +
  coord_sf()+
  labs(title = "Education Levels by Census Tract")+
  labs(fill = "% of Population")+
  theme_void()

level_plot <- base_plot +
  transition_manual(
    education_level,
    states = unique(join_data3$education_level),
    transition_length = 1,
    state_length = 1
    ) +
  labs(subtitle = "Current state is {current_frame}")+
  enter_fade() +
  exit_fade()

animate(
  level_plot,
  duration = 30,
  fps = 20,
  width = 400,
  height = 400,
  renderer = gifski_renderer()
)


```


#Machine Learning

```{r}
#MACHINE LEARNING

set.seed(20201007)

# Remove NA values from income
ml1 <- ed_census_inc_percent_tract%>%
  filter(!(is.na(as.numeric(income))))

# Convert numerical values that are stored as characters
ml1 <-ml1 %>%
  mutate(income = as.numeric(income))%>%
  mutate(income_moe = as.numeric(income_moe))%>%
  mutate(Pop_18.24_MoE = as.numeric(Pop_18.24_MoE))%>%
  select(-GEOID)%>%
  select(-Geographic.Area.Name) %>%
  select(where(is.numeric))
  

# create a split object
data_split <- initial_split(data = ml1, prop = 0.75)


# create the training and testing data
data_train1 <- training(x = data_split)
data_test1 <- testing(x = data_split)

ed_percent_rec <- recipe(percent_broadband ~ .,
                         data = data_train1) %>%
  step_normalize(less_than_hs_percent)

prep_rec <-prep(ed_percent_rec)

data_train_processed <- bake(prep_rec, new_data = data_train1)
data_test_processed <- bake(prep_rec, new_data = data_test1)

data_frame_processed <- bake(prep(ed_percent_rec, training = data_train1), new_data = data_train1)
data_frame_processed_test <- bake(prep(ed_percent_rec, training = data_test1), new_data = data_test1)

bake(prep(ed_percent_rec, training = data_train1), new_data = data_train1)

ed_percent_data <- ed_percent_rec %>%
 prep()%>%
 bake(new_data = data_train1)

ed_model <- linear_reg() %>%
  set_engine("glm")%>%
  set_mode(mode = "regression")

ed_wf <- workflow() %>%
  add_recipe(ed_percent_rec) %>%
  add_model(ed_model)

ed_fit <- ed_wf %>%
  fit(data = data_train1)

ed_fit <- ed_wf %>%
  fit(data = data_train_processed)

predictions <- bind_cols(
  data_test1,
  predict(object = ed_fit, new_data = data_test1)
)

predictions1<- predictions %>%
  select(percent_broadband, .pred_res)


rmse <- predictions %>%
  yardstick::rmse(truth = percent_broadband, estimate = .pred_res)
print(rmse)
mae <- predictions %>%
  yardstick::mae(truth = percent_broadband, estimate = .pred_res)
print(mae)

predictions_map <- left_join(predictions1, ed_census_inc_percent_tract, by = "percent_broadband")

predictions_map <- predictions_map %>%
  select(percent_broadband, .pred_res, GEOID)%>%
  mutate(GEOID = sub("1400000US","",GEOID))


predictions_joined <- left_join(x= geospatial_data, predictions_map, by = "GEOID")


true_values <- ggplot(st_as_sf(predictions_joined)) + 
  geom_sf(aes(fill = percent_broadband)) +
  scale_fill_gradient(high = "red", low = "green") +
  coord_sf()+
  labs(title = "Lacking Broadband TRUE (testing)")+
  labs(fill = "% of Population")+
  theme_void()

predicted_values <- ggplot(st_as_sf(predictions_joined)) + 
  geom_sf(aes(fill = .pred_res)) +
  scale_fill_gradient(high = "red", low = "green") +
  coord_sf()+
  labs(title = "Lacking Broadband Predicted (testing)")+
  labs(fill = "% of Population")+
  theme_void()

true_v_pred <- true_values + predicted_values
true_v_pred
#Create new dataframe that is only numeric values

```
```{r}

predictions_whole <- bind_cols(
  ml1,
  predict(object = ed_fit, new_data = ml1)
)

predictions2<- predictions_whole %>%
  select(percent_broadband, .pred_res)

predictions_map_whole <- left_join(predictions2, ed_census_inc_percent_tract, by = "percent_broadband")

predictions_map_whole <- predictions_map_whole %>%
  select(percent_broadband, .pred_res, GEOID)%>%
  mutate(GEOID = sub("1400000US","",GEOID))


predictions_joined2 <- left_join(x= geospatial_data, predictions_map_whole, by = "GEOID")


true_values_all <- ggplot(st_as_sf(predictions_joined2)) + 
  geom_sf(aes(fill = percent_broadband)) +
  scale_fill_gradient(high = "red", low = "green", 
                      breaks = c(10,20, 30, 40, 50, 60),
                      limits = c(10, 60)) +
  coord_sf()+
  labs(title = "Lacking Broadband TRUE (all data)")+
  labs(fill = "% of Population")+
  theme_void()

predicted_values_all <- ggplot(st_as_sf(predictions_joined2)) + 
  geom_sf(aes(fill = .pred_res)) +
  scale_fill_gradient(high = "red", low = "green",
                      breaks = c(10,20, 30, 40, 50, 60),
                      limits = c(10, 60)) +
  coord_sf()+
  labs(title = "Lacking Broadband Predicted (all data)")+
  labs(fill = "% of Population")+
  theme_void()

true_v_pred2 <- true_values_all + predicted_values_all
true_v_pred2
```


